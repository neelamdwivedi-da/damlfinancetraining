module Scripts.Transfer where

import DA.Map (empty, fromList)
import DA.Set (singleton)
import Daml.Script

-- INTERFACE DEPENDENCIES --
import Daml.Finance.Interface.Account.Factory qualified as Account (F)
import Daml.Finance.Interface.Holding.Factory qualified as Holding (F)

-- IMPLEMENTATION DEPENDENCIES --
import Daml.Finance.Account.Account qualified as Account (Factory(..))
import Daml.Finance.Holding.Fungible qualified as Fungible (Factory(..))

import Workflow.CreateAccount qualified as CreateAccount

testCreateAccount: Script () 
testCreateAccount = script do 
 
    [alice, bank, public] <- mapA allocateParty ["Alice", "Bank", "Public"] 

    -- create Account Factory
    accountFactoryImplCid <- submit bank do
        createCmd Account.Factory with provider = bank; observers = empty
    -- convert the factory implementation Cid to interface Cid 
    let accountFactoryInterfaceCid = toInterfaceContractId @Account.F accountFactoryImplCid

    -- create Holding factory
    holdingFactoryImplCid <- submit bank do 
        createCmd Fungible.Factory with 
            provider = bank 
            observers = fromList [("PublicObserver", singleton public)]
    -- convert the afctory implementation Cid to interface Cid
    let holdingFactoryInterfaceCid = toInterfaceContractId @Holding.F holdingFactoryImplCid

    -- alice requests for an account
    aliceRequestCid <- submit alice do 
        createCmd CreateAccount.Request with 
            owner = alice
            custodian = bank 
    -- bank accepts request
    aliceAccountCid <- submit bank do 
        exerciseCmd aliceRequestCid CreateAccount.Accept with 
            label = "Alice@Bank"
            description = "Alice's account"
            accountFactoryCid = accountFactoryInterfaceCid 
            holdingFactoryCid = holdingFactoryInterfaceCid
            observers = []

    return ()

